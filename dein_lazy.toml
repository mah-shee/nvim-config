[[plugins]]
repo = 'Shougo/denite.nvim'
hook_source = 'source ~/.config/nvim/plugins/denite-source.vim'
hook_add = 'source ~/.config/nvim/plugins/denite-add.vim'

[plugins.ftplugin]
denite = '''
" Define mappings
nnoremap <silent><buffer><expr> <CR>
\ denite#do_map('do_action')
nnoremap <silent><buffer><expr> a
\ denite#do_map('choose_action')
nnoremap <silent><buffer><expr> d
\ denite#do_map('do_action', 'delete')
nnoremap <silent><buffer><expr> p
\ denite#do_map('do_action', 'preview')
nnoremap <silent><buffer><expr> q
\ denite#do_map('quit')
nnoremap <silent><buffer><expr> '
\ denite#do_map('quick_move')
nnoremap <silent><buffer><expr> i
\ denite#do_map('open_filter_buffer')
nnoremap <silent><buffer><expr> <Space>
\ denite#do_map('toggle_select').'j'
'''
denite-filter = '''
" 一つ上のディレクトリを開き直す
inoremap <silent><buffer><expr> <BS> denite#do_map('move_up_path')
" imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
" Deniteを閉じる
inoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
nnoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
'''

[[plugins]]
repo = 'ncm2/float-preview.nvim'
on_source = 'deoplete.nvim'
if = 'has("nvim")'
hook_add = '''
let g:float_preview#docked = 0
let g:float_preview#max_width = 60
let g:float_preview#max_height = 20

function! DisableExtras()
  call nvim_win_set_option(g:float_preview#win, 'number', v:false)
  call nvim_win_set_option(g:float_preview#win, 'relativenumber', v:false)
  call nvim_win_set_option(g:float_preview#win, 'cursorline', v:false)
endfunction

autocmd User FloatPreviewWinOpen call DisableExtras()
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['denite.nvim']


[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
nnoremap <silent> <C-n>
\ :<C-u>Defx -listed -resume -buffer-name=tab`tabpagenr()`<CR>
'''
hook_source = '''
call defx#custom#column('mark', {
        \ 'readonly_icon': '✗',
        \ 'selected_icon': '✓',
        \ })
call defx#custom#column('icon', {
        \ 'directory_icon': '▸',
        \ 'opened_icon': '▾',
        \ 'root_icon': ' ',
        \ })
'''
[plugins.ftplugin]
defx = '''
" Define mappings
nnoremap <silent><buffer><expr> <CR>
\ defx#async_action('drop')
nnoremap <silent><buffer><expr> c
\ defx#do_action('copy')
nnoremap <silent><buffer><expr> !
\ defx#do_action('execute_command')
nnoremap <silent><buffer><expr> m
\ defx#do_action('move')
nnoremap <silent><buffer><expr> p
\ defx#do_action('paste')
nnoremap <silent><buffer><expr> l
\ defx#async_action('open')
nnoremap <silent><buffer><expr> E
\ defx#do_action('open', 'vsplit')
nnoremap <silent><buffer><expr> P
\ defx#do_action('open', 'pedit')
nnoremap <silent><buffer><expr> o
\ defx#async_action('open_or_close_tree')
nnoremap <silent><buffer><expr> O
\ defx#async_action('open_tree_recursive')
nnoremap <silent><buffer><expr> K
\ defx#do_action('new_directory')
nnoremap <silent><buffer><expr> N
\ defx#do_action('new_file')
nnoremap <silent><buffer><expr> M
\ defx#do_action('new_multiple_files')
nnoremap <silent><buffer><expr> C
\ defx#do_action('toggle_columns', 'mark:filename:type:size:time')
nnoremap <silent><buffer><expr> S
\ defx#do_action('toggle_sort', 'Time')
nnoremap <silent><buffer><expr> se
\ defx#do_action('save_session')
nnoremap <silent><buffer><expr> sl
\ defx#do_action('load_session')
nnoremap <silent><buffer><expr> d
\ defx#do_action('remove_trash')
nnoremap <silent><buffer><expr> r
\ defx#do_action('rename')
nnoremap <silent><buffer><expr> x
\ defx#do_action('execute_system')
nnoremap <silent><buffer><expr> >
\ defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> .
\ defx#do_action('repeat')
nnoremap <silent><buffer><expr> yy
\ defx#do_action('yank_path')
nnoremap <silent><buffer><expr> h
\ defx#async_action('cd', ['..'])
nnoremap <silent><buffer><expr> ~
\ defx#async_action('cd')
nnoremap <silent><buffer><expr> \
\ defx#do_action('cd', getcwd())
nnoremap <silent><buffer><expr> q
\ defx#do_action('quit')
nnoremap <silent><buffer><expr> <Space>
\ defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> *
\ defx#do_action('toggle_select_all')
nnoremap <silent><buffer><expr> j
\ line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k
\ line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr> <C-l>
\ defx#do_action('redraw')
xnoremap <silent><buffer><expr> <CR>
\ defx#do_action('toggle_select_visual')
nnoremap <silent><buffer><expr> <C-g>
\ defx#do_action('print')
nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ?
\ ':<C-u>wincmd w<CR>' :
\ ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
on_source = 'denite.nvim'
hook_add = '''
  " nnoremap <silent> [Space]s :<C-u>Deol zsh -edit<CR>
  nnoremap <silent> [Space]n :<C-u>call deol#new({'command': 'fish'})<CR>
  nnoremap <silent> [Space]s :<C-u>Deol fish<CR>
  nnoremap <silent> [Window]D  :<C-u>call deol#kill_editor()<CR>
'''
hook_source = '''
  " let g:deol#prompt_pattern = '\w*%'
  let g:deol#prompt_pattern = '%'
  " Set to $PATH.
  let s:bin = dein#get('vim-themis').rtp . '/bin'
  function! s:split_envpath(path) abort
    let delimiter = has('win32') ? ';' : ':'
    if stridx(a:path, '\' . delimiter) < 0
      return split(a:path, delimiter)
    endif
    let split = split(a:path, '\\\@<!\%(\\\\\)*\zs' . delimiter)
    return map(split,'substitute(v:val, ''\\\([\\'
          \ . delimiter . ']\)'', "\\1", "g")')
  endfunction
  function! s:join_envpath(list, orig_path, add_path) abort
    let delimiter = has('win32') ? ';' : ':'
    return (stridx(a:orig_path, '\' . delimiter) < 0
          \ && stridx(a:add_path, delimiter) < 0) ?
          \   join(a:list, delimiter) :
          \   join(map(copy(a:list),
          \        "substitute(v:path, ',\\|\\\\,\\@=', '\\\\\\0', 'g')"),
          \        delimiter)
  endfunction
  let $PATH = s:join_envpath(
        \ dein#util#_uniq(insert(
        \    s:split_envpath($PATH), s:bin)), $PATH, s:bin)
  let $THEMIS_HOME = dein#get('vim-themis').rtp
  unlet s:bin
'''
[plugins.ftplugin]
deol = '''
nnoremap <buffer><silent> [Space]gc
\ :<C-u>call deol#send('git commit')<CR>
nnoremap <buffer><silent> [Space]gA
\ :<C-u>call deol#send('git commit --amend')<CR>
'''

[[plugins]]
repo = 'Shougo/neosnippet'
on_event = 'InsertCharPre'
on_ft = 'snippet'
depends = ['neosnippet-snippets', 'context_filetype.vim']
hook_source = '''
let g:neosnippet#snippets_directory = '~/.config/nvim/snippets'
let g:neosnippet#enable_snipmate_compatibility = 1
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
if has('conceal')
    set conceallevel=2 concealcursor=niv
endif
'''


[[plugins]]
repo = 'chemzqm/denite-git'
on_event = 'InsertLeave'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_event = 'InsertLeave'
hook_source = '''
source ~/.config/nvim/plugins/quickrun.vim
'''

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'sjl/gundo.vim'
on_event = 'InsertLeave'
hook_source = '''
nnoremap <F5> :GundoToggle<CR>
'''

# [[plugins]]
# repo = 'tpope/vim-endwise'
# on_event = 'InsertEnter'

[[plugins]]
repo = 'tpope/vim-surround'
on_event = 'InsertEnter'

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'

# [[plugins]]
# repo = 'w0rp/ale'
# on_ft = ['python', 'javascript']
# hook_post_source = '''
# source ~/.config/nvim/plugins/ale.vim
# '''

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

[[plugins]]
repo = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_source = 'let g:fruzzy#sortonempty = 0'
hook_post_update = 'call fruzzy#install()'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add = '''
let g:rustfmt_autosave = 1
'''

[[plugins]]
repo = 'whonore/Coqtail'
on_ft = "coq"
